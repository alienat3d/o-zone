import Notify from 'simple-notify';
// ? [Также см. 1.5.2 в search.js]
const getData = (string) => {
  // 1.1 Метод fetch() создан специально для работы с серверными запросами, он принимает один обязательный аргумент - это строку URL, по которой находятся данные, которые нам необходимо получить.
  // 1.2 Когда fetch() запускается, то он делает обращение по URL, которое мы предоставляем в качестве аргумента. На другой стороне сервер принимает наш запрос и отдаёт данные исходя из запроса. В данном примере с сервиса jsonplaceholder.typicode.com из массива "todos" мы получаем элемент с индексом "1".
  // 1.3 Далее сервер формирует некий ответ на наш запрос и присылает его нам. Но этот ответ сервер пришлёт не сразу, а через какое-то время. И это количество времени нам точно не известно, т.к. зависит от многих факторов.
  // 1.4 И чтобы мы могли работать с информацией в тот момент, когда она точно нами получена, для метода fetch() существует специальный метод then(). Данный метод получает аргументом callback-функцию, а она уже принимает параметр "response", т.е. ответ от сервера. Теперь then() запустить свою callback-функцию только тогда, когда получит весь ответ от сервера, а аргументом в эту функцию он отправит весь ответ от сервера "(response)".
  // ? Callback-функция - это обычная функция, которую мы передаём аргументом в другую функцию.
  // 1.5 Среди разных свойств полученного объекта есть и "body: ReadableStream", это как раз те данные, что мы и ждали, но только не в том виде, что будет нам полезным. А чтобы как-то с ним работать нам сперва потребуется расшифровать его специальным методом JSON(), который переведёт ответ в JSON-структуру и вернуть с return.
  // 1.6 Далее используем ещё один метод then(), который также получит callback-функцию в качестве аргумента, но этот then() получит уже другие, изменённые данные, те, что вернёт response.json() в предыдущем then() и назовём мы этот аргумент "data"
  return fetch(
    `https://o-zone-fake-default-rtdb.europe-west1.firebasedatabase.app/goods.json?${string ? `search=${string}` : ''}`
  )
    .then((response) => {
      // * Теперь попробуем воспроизвести ошибку и обработать её. Для этого допустим опечатку в URL выше. Как обрабатываются такие ошибки? Просто с помощью условия if и "response.ok".
      if (response.ok) {
        return response.json();
      } else {
        // * Выкидываем ошибку с "throw new Error", а потом обработаем её перехватчиком ошибок ".catch()"
        throw new Error(
          "We've got an error while getting data from Firebase!"
        );
      }
    })
    .catch((error) => {
      // * Добавим всплывающее окно из библиотеки Notify
      new Notify({
        status: 'error',
        title: 'Oops!',
        text: error.message,
        effect: 'fade',
        type: 3,
      });
    });

  /* .then((data) => {
      console.log(data); // 1.7 И вот мы видим уже наш объект в том виде, который нам был нужен. И теперь мы её можем отправить например на рендер или в сохранение на localStorage.
    }); */
  // ? Кстати с JSONplaceholder, помимо todos мы также можем получать ещё следующие данные:
  /*   
  /posts/1/comments
  /albums/1/photos
  /users/1/albums
  /users/1/todos
  /users/1/posts 
  */
};

export default getData;

// Здесь мы разобрали метод get, но на самом деле методов гораздо больше, например можно разобрать также метод post, для этого перейдём в post-data.js [...]

// 3.1 Итак, мы создали уже два отдельных модуля getData & postData, которые можем вызывать из любого другого модуля.
// 3.2 Ещё раз - При вызове getData функция вернёт результат выполнения метода fetch(), который является асинхронной операцией, а это означает, что результат его выполнения займёт определённое время. И сколько времени займёт мы точно не можем узнать. Для этого мы используем метод then(), который будет отработан сразу, как только данные с сервера полностью поступят. Тогда эти данные поступят через аргумент в callback-функцию, которая переведёт в удобный нам формат и вернёт эти данные наружу. Далее эти данные также будут возвращены из функции getData, вместо вызова этой функции getData() туда, где нам это может понадобиться и можно будет воспользоваться ещё одним then(), чтобы вывести в консоль или отправить в какую-то другую функцию данные от сервера.
// * getData().then((data) => {  console.log(data); });
