const renderGoods = (goods) => {
  const goodsWrapper = document.querySelector('.goods');
  // *2.0 == Реализуем функцию корзины ==
  // 2.1 Для этого нам понадобится localStorage, куда мы можем заносить локально (в кэш браузера юзера) какие-то данные. Чтобы записывать данные в localStorage у нас есть метод setItem(), который принимает два аргумента: 1) название ключа, которым мы назовём будущий контейнер для записываемых данных; 2) передадим массив данных, но не просто массив, а он нам нужен в виде строки и для этого используем метод JSON.Stringify(). Теперь у нас запишутся в localStorage все товары, отображаемые на странице.
  localStorage.setItem('goods', JSON.stringify(goods));

  goodsWrapper.innerHTML = '';
  // 2.2 Итак у каждого товара есть свой id и именно по нему мы будем определять на какой именно товар мы кликнули. Ну а для этого на каждую карточку товара нам необходимо поместить определённый дата-атрибут, по которому мы будем определять на какой именно товар мы кликнули. Укажем его в теге с классом "card". Теперь у каждой из карточек есть уникальный атрибут data-id, к которому мы можем привязать логику. Мы можем забрать конкретный объект из localStorage и положить его в другом объекте в localStorage под названием "cart".
  // 2.3.1 Обработаем клик по кнопке "В корзину". 
  // todo 2.3.2 Для это теоретически можно было бы повесить обработчик события по клику на каждую карточку, но делать это не очень хорошо (!!!), представляете, если бы у нас было 1000 карточек товара и на каждой бы висел обработчик события. Это совершенно расточительный подход к использованию ресурсов устройства пользователя!
  // 2.3.3 Но благо у нас есть лучше способ - «делегирование». Повесим обработчик события на весь контейнер, где находятся все карточки товара с классом ".goods", а потом проверим по какой именно карточки происходит клик. Таким образом мы не зависим больше от количества карточек на страницы и обработчик у нас будет всего лишь один.
  // 2.3.4 Перейдём в cart.js и получим контейнер ".goods"...
  goods.forEach(goodsItem => {
    goodsWrapper.insertAdjacentHTML(
      'beforeend',
      `
        <div class="col-12 col-md-6 col-lg-4 col-xl-3">
          <div class="card" data-id="${goodsItem.id}">
            ${goodsItem.sale ? '<div class="card-sale">🔥Hot Sale🔥</div>' : ''}
            <div class="card-img-wrapper">
              <span class="card-img-top" style="background-image: url('${
                goodsItem.img
              }')"></span>
            </div>
            <div class="card-body justify-content-between">
              <div class="card-price">${goodsItem.price} ₽</div>
              <h5 class="card-title">${goodsItem.title}</h5>
              <button class="btn btn-primary">В корзину</button>
            </div>
          </div>
        </div>
      `
    );
  });
};

export default renderGoods;
